// <auto-generated />
using System;
using FriendContact.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FriendContact.Migrations
{
    [DbContext(typeof(FriendListContext))]
    [Migration("20241013182114_new database connection")]
    partial class newdatabaseconnection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FriendContact.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Friend"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Best-Friend"
                        });
                });

            modelBuilder.Entity("FriendContact.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "CategoryId");

                    b.Property<int>("DesiredContactFrequency")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "DesiredContactFrequency");

                    b.Property<DateOnly>("LastContactDate")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "LastContactDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Friends");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DesiredContactFrequency = 3,
                            LastContactDate = new DateOnly(2024, 10, 13),
                            Name = "John"
                        });
                });

            modelBuilder.Entity("FriendContact.Models.Friend", b =>
                {
                    b.HasOne("FriendContact.Models.Category", "FriendCategory")
                        .WithMany("Friends")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FriendCategory");
                });

            modelBuilder.Entity("FriendContact.Models.Category", b =>
                {
                    b.Navigation("Friends");
                });
#pragma warning restore 612, 618
        }
    }
}
